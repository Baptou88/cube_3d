#include <Arduino.h>
#include <heltec.h>

SSD1306Wire *display = Heltec.display;

// 'Nouveau projet', 128x64px
const uint8_t vertic [] PROGMEM = {
  0x0F, 0x00, 0x31, 0x00, 0x41, 0x00, 0x81, 0x00, 0x81, 0x00, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x02, 0x01, 0x04, 0x01, 0x18, 0x01, 
  0xE0, 0x01
};
const uint8_t horiz [] PROGMEM = {
  0xE0, 0x0F, 0x00, 0xFF, 0x1F, 0x18, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 
  0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 
  0x08, 0x01, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x04, 0x01, 
  0x00, 0x00, 0x00, 0x03, 0xFF, 0x0F, 0x00, 0xFE, 0x00
};
const uint8_t inc45 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x11, 
  0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x40, 0x30, 0x00, 0x00, 0x20, 0x20, 
  0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
  0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
  0x02, 0x04, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 
  0x84, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 
  0x10, 0x00, 0x00, 0x00
};
const uint8_t inc135 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x1C, 0x03, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
  0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 
  0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x60, 0x1C, 0x00, 0x00, 0x80, 0x07, 
  0x00, 0x00, 0x00, 0x00
};
const uint8_t centre [] PROGMEM = {
  0x7C, 0x00, 0xFE, 0x00, 0xFF, 0x01, 0xFF, 0x01, 0xEF, 0x01, 0xFF, 0x01, 
  0xFF, 0x01, 0xFE, 0x00, 0x7C, 0x00
};

const uint8_t epd_bitmap_Nouveau_projet [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3C, 0x02, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x02, 0x42, 0x04, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x22, 
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x40, 0x00, 0x02, 0x12, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x02, 0x0A, 0x08, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x06, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x02, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x02, 0x04, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0xF8, 0xFF, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xFC, 0x01, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x20, 0x00, 0xFE, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xFE, 0x03, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0xDE, 0x03, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x00, 0xFE, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xFE, 0x03, 0x20, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xFC, 0x01, 
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xF8, 0x7F, 0xF8, 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x02, 
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x80, 0x80, 0x02, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x02, 0x02, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x02, 0x06, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x11, 0x02, 0x1A, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x04, 0xE2, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
  };


struct pt2D_t {
  float x ;
  float y ;
};
struct pt3D_t {
  float x ;
  float y ;
  float z ;
};

pt2D_t cube_pt[8];
// pt2D_t cube_pt[] = {
//   {37.6867235218178,12.7373447043636},
//   {73.7274204169332,5.42419319435559},
//   {73.7274204169332,58.5758068056444},
//   {37.6867235218178,51.2626552956365},
//   {59.2251850602793,18.9549629879441},
//   {85.9013334604115,15.9671111534705},
//   {85.9013334604115,48.0328888465295},
//   {59.2251850602793,45.0450370120559},
// };

float angle_deg = 30;
float  z_offset = -4;
float cube_size = 70;

pt3D_t orig_points[] = {
  {-1,-1,1},
  {1,	-1,1},
  {1,	1,1},
  {-1,1,1},
  {-1,-1,-1},
  {1,	-1,-1},
  {1,	1,-1},
  {-1,1,-1}
};
pt3D_t rotated_points [8];
  
// pt2D_t cube_pt[] = 
//   {
//     {64-28,32-28},  //1
//     {64+28,32-28},  //2
//     {64+28,32+28},  //3
//     {64-28,32+28},  //4

//     {64-16,32-16},  //5
//     {64+16,32-16},  //6
//     {64+16,32+16},  //7
//     {64-16,32+16}   //8
//   };
float shoelace(pt2D_t a,pt2D_t b,pt2D_t c,pt2D_t d){
  return {
    (a.x*b.y - a.y*b.x) + 
    (b.x*c.y - b.y*c.x) + 
    (c.x*d.y - c.y*d.x) + 
    (d.x*a.y - d.y*a.x)
  };
}
void hiddenCorner(pt2D_t a,pt2D_t b){
  static int diviser = 3;
  for (size_t i = 0; i < diviser; i++)
  {
    display->setPixel((i*(b.x - a.x)/diviser)+a.x,(i*(b.y - a.y)/diviser)+a.y);
  }
  
}
void drawFace(pt2D_t a,pt2D_t b,pt2D_t c,pt2D_t d){
  if (shoelace(a,b,c,d)>=0)
  {
    display->drawLine(a.x,a.y,b.x,b.y);
    display->drawLine(b.x,b.y,c.x,c.y);
    display->drawLine(c.x,c.y,d.x,d.y);
    display->drawLine(d.x,d.y,a.x,a.y);

  } else
  {
    display->setPixel(a.x,a.y);
    display->setPixel(b.x,b.y);
    display->setPixel(c.x,c.y);
    display->setPixel(d.x,d.y);

    hiddenCorner(a,b);
    hiddenCorner(b,c);
    hiddenCorner(c,d);
    hiddenCorner(d,a);
  }
  
  
}
void calcul(void){
  for (size_t i = 0; i < 8; i++)
  {
    // rotate 3d points
    rotated_points[i].x =  orig_points[i].x * cos(radians(angle_deg)) - orig_points[i].z * sin(radians(angle_deg));
    rotated_points[i].y =  orig_points[i].y;
    rotated_points[i].z =  orig_points[i].x * sin(radians(angle_deg)) + orig_points[i].z * cos(radians(angle_deg)) + z_offset;

    //project 3d points into 2d
    cube_pt[i].x  = 64 - rotated_points[i].x / rotated_points[i].z * cube_size;
    cube_pt[i].y  = 32 - rotated_points[i].y / rotated_points[i].z * cube_size;
  }
  
}
void setup() {
  // put your setup code here, to run once:

  Heltec.begin(true,true,true,true,868E6);
  display->clear();

  display->drawXbm(0,0,128,64,epd_bitmap_Nouveau_projet);

  
  display->drawXbm(64-9/2,32-9/2,9,9,centre);

  display->drawXbm(64-9/2,32-37/2,9,37,vertic);
  display->display();
  delay(500);
  display->drawXbm(64-31/2,32-31/2,31,31,inc135);
  display->display();
  delay(500);

  display->drawXbm(64-37/2,32-9/2,37,9,horiz);
  display->display();
  delay(500);

  display->drawXbm(64-31/2,32-31/2,31,31,inc45);
  display->setColor(OLEDDISPLAY_COLOR::BLACK);
  display->drawXbm(64-9/2,32-37/2,9,37,vertic);
  display->setColor(OLEDDISPLAY_COLOR::WHITE);
  display->display();

  delay(1000);

  display->display();

  delay(1000);

}

void loop() {
  // put your main code here, to run repeatedly:

  calcul();

  display->clear();

    // //face A
    // if (shoelace(cube_pt[0],cube_pt[1],cube_pt[2],cube_pt[3])>=0)
    // {
    //   display->drawLine(cube_pt[0].x,cube_pt[0].y,cube_pt[1].x,cube_pt[1].y);
    //   display->drawLine(cube_pt[1].x,cube_pt[1].y,cube_pt[2].x,cube_pt[2].y);
    //   display->drawLine(cube_pt[2].x,cube_pt[2].y,cube_pt[3].x,cube_pt[3].y);
    //   display->drawLine(cube_pt[3].x,cube_pt[3].y,cube_pt[0].x,cube_pt[0].y);

    // }
  
    drawFace(cube_pt[0],cube_pt[1],cube_pt[2],cube_pt[3]);
    drawFace(cube_pt[1],cube_pt[5],cube_pt[6],cube_pt[2]);
    drawFace(cube_pt[5],cube_pt[4],cube_pt[7],cube_pt[6]);
    drawFace(cube_pt[4],cube_pt[0],cube_pt[3],cube_pt[7]);

  //display->drawLine(cube_pt[4].x,cube_pt[4].y,cube_pt[5].x,cube_pt[5].y);
  //display->drawLine(cube_pt[5].x,cube_pt[5].y,cube_pt[6].x,cube_pt[6].y);
  //display->drawLine(cube_pt[6].x,cube_pt[6].y,cube_pt[7].x,cube_pt[7].y);
  //display->drawLine(cube_pt[7].x,cube_pt[7].y,cube_pt[4].x,cube_pt[4].y);

  //display->drawLine(cube_pt[0].x,cube_pt[0].y,cube_pt[4].x,cube_pt[4].y);
  //display->drawLine(cube_pt[1].x,cube_pt[1].y,cube_pt[5].x,cube_pt[5].y);
  //display->drawLine(cube_pt[2].x,cube_pt[2].y,cube_pt[6].x,cube_pt[6].y);
  //display->drawLine(cube_pt[3].x,cube_pt[3].y,cube_pt[7].x,cube_pt[7].y);

  display->display();

  angle_deg += 1;

  delay(50);
}